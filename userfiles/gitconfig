[grep]
  extendRegexp = true

[alias]
  # All aliases are wrapped in a function/set -x so i can always 
  # remember what command(s) I'm actually running with the shortcut
  c   = "!f() { (set -x; git commit --verbose \"$@\"; ) }; f"
  c-  = "!f() { (set -x; git commit -m \"$@\"; ) }; f"
  s   = "!f() { (set -x; git status -sb \"$@\"; ) }; f"
  g   = "!f() { (set -x; grep --break --heading --line-number \"$@\"; ) }; f"
  st  = "!f() { (set -x; git stash \"$@\"; ) }; f"
      
  fetch-prune = "!f() { (set -x; git fetch --prune origin \"$@\"; ) }; f"
  f = fetch
  push = "!f() { (set -x; git push origin \"$@\"; ) }; f"

  # Add - specify on cmdline or get list of non-staged changed files
  a = "!f() {                                      \
    if [ $# -gt 0 ]; then                          \
          (set -x; git add \"$@\");                \
              return $?;                           \
        fi;                                        \
        PS3='Select one: ';                        \
        echo 'Add File: ';                         \
        select file in $(git diff --name-only); do \
              (set -x; git add \"$file\");         \
              break;                               \
        done;                                      \
  }; f"

  # Logging aliases ... except don't set-x echo the log ones (too wordy)
  l = log --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s %C(blue)(%an, %cr)%Creset' --decorate --abbrev-commit
  ls = log --date=format:'%Y%m%d' --pretty=format:'%C(red)%h%Creset %s %C(blue)(%an on %ad)%Creset' --decorate --abbrev-commit
  lrn = log --pretty=format:'%s' --decorate --abbrev-commit # for release not generation (comment only)
  lg = !git l --graph
  ll = !git l --stat
  ld = !git ll --patch    # Show diffs (-p option)
  lc = log --pretty=format:'%s' --decorate --abbrev-commit
  
  # + -n/--dry-run | -i/--interactive | -f/--force
  cleanx = "!f() { (set -x; git clean -dx \"$@\"; ) }; f"

  # Set git to use the credential memory cache (helpful for non-ssh systems to run long commands)
  cache-creds = "!f() { set -x; git config --global credential.helper cache; }; f;"

  # Branching aliases
  #   Yeah, I know i didn't need to do all lookups at the
  #   top (just two of them), but I think it makes it more
  #   readable w/o much cost

  # Create branch 
  #   usage: git b <branch-name-to-create>
  #   - checks for local or remote existence before creating
  cb = "!f() {                                                \
        local allBranches=$(git branch -a                     \
                                      | sed 's|^\\* ||'       \
                                      | grep -v '/HEAD ->'    \
                                      | sed 's|remotes/.*/||' \
                                      | sed 's|^  ||'         \
                                      | sort | uniq);         \
        if [ $# -ne 1 ]; then                                 \
              echo 'usage: git cb <branch-name-to-create>';   \
              return 1;                                       \
        fi;                                                   \
        echo $allBranches | grep -w $1 > /dev/null;           \
        if [ $? -eq 0 ]; then                                 \
              echo 'Branch already exists';                   \
              return 1;                                       \
        fi;                                                   \
              echo 'Creating new branch: '\"$1\";             \
              (set -x; git checkout -b \"$1\"                 \
                && git push --set-upstream origin \"$1\");    \
  }; f"

  # Switch branches (local or remote)
  #   usage: git b
  b = "!f() {                                                                    \
        local selectList;                                                        \
        local listAll='**List-All**';                                            \
        local currentBranch=$(git branch                                         \
                                        | grep '^\\*'                            \
                                        | sed 's|^\\* ||');                      \
        local localBranches=$(git branch                                         \
                              | sed 's|^\\* ||'                                  \
                              | sort);                                           \
        PS3='Select one: ';                                                      \
        echo 'Local branches: ';                                                 \
        selectList=$(echo \"$localBranches\"                                     \
                            | sed \"s|\\b$currentBranch\\b||\"                   \
                            ; echo $listAll);                                    \
        select branch in $selectList; do                                         \
              if [ $branch == $listAll ]; then                                   \
                    echo 'All Branches: (fetching first)';                       \
                    local allBranches=$(git fetch 2>/dev/null;                   \
                                git branch -a                                    \
                                                        | sed 's|^\\* ||'        \
                                                        | grep -v '/HEAD ->'     \
                                                        | sed 's|remotes/.*/||'  \
                                                        | sed 's|^  ||'          \
                                                        | sort | uniq);          \
                    selectList=$(echo \"$allBranches\"                           \
                                        | sed \"s|\\b$currentBranch\\b||\");     \
                    select branch in $selectList; do                             \
                          (set -x; git checkout $branch; );                      \
                          break;                                                 \
                    done;                                                        \
              else                                                               \
                    (set -x; git checkout $branch; );                            \
              fi;                                                                \
              break;                                                             \
        done;                                                                    \
  }; f;"
  b- = "!f() { (set -x; git checkout - ; ) }; f;"
  bp = "!f() { (set -x; git checkout $(git parent 2>/dev/null); ) }; f;"

  branch-delete-orphans= "!f() {                              \
        echo \"Fetching latest git references ...\";          \
        git fetch -p;                                         \
        echo;                                                 \
        echo \"Local branches with deleted remote:\";         \
        for branch in $(git branch -vv | grep -v '^\\*'       \
                          | grep ': gone]'                    \
                          | awk '{print $1}'); do             \
              echo;                                           \
              echo \"Delete local orphaned branch $branch?\"; \
              PS3='Delete? ';                                 \
              select yn in Yes No; do                         \
                    case \"$yn\" in                           \
                          Yes) git branch -D $branch; break;; \
                          No) break ;;                        \
                    esac;                                     \
              done;                                           \
        done;                                                 \
}; f;"
  
bdo="!f() { (set -x; git branch-delete-orphans; ) }; f;"

# Reset/revert aliases
co-- = "!f() {                                         \
        PS3='Select one: ';                            \
        echo 'Revert file (git checkout -- <file>) ';  \
        select file in $(git status -s                 \
                                  | sed -e '/^[A-Z]/d' \
                                  | awk '{print $2}'   \
                            ); do                      \
              (set -x; git checkout -- \"$file\");     \
              break;                                   \
        done;                                          \
  }; f;"

  rh = "!f() {                                         \
        PS3='Select one: ';                            \
        echo 'Unstage file (git reset HEAD <file>) ;   \
        select file in $(git status -s                 \
                                  | sed -e '/^[A-Z]/d' \
                                  | awk '{print $2}'   \
                            ); do                      \
              (set -x; git checkout -- \"$file\");     \
              break;                                   \
        done;                                          \
  }; f;"

  # Diffing alias
  d = "!f() {                                      \
        PS3='Select one: ';                        \
        echo 'Diff File: ';                        \
        select file in $(git diff --name-only); do \
              git diff $file;                      \
              break;                               \
        done;                                      \
  }; f;"

  # Diffing alias
  ds = "!f() {                                      \
        PS3='Select one: ';                        \
        echo 'Diff File: ';                        \
        select file in $(git diff --cached --name-only); do \
              git diff --cached $file;             \
              break;                               \
        done;                                      \
  }; f;"

  # Merging aliases
  ri = "!f() { (set -x; git rebase -i \"$@\"; ) }; f"
  rc = "!f() { (set -x; git rebase --continue \"$@\"; ) }; f"
  m = "!f() {                                       \
        PS3='Select one: ';                         \
        echo 'Merge from branch: ';                 \
        select branch in $(git branch               \
                              | grep -v '^\\*'); do \
              git merge $branch;                    \
              break;                                \
        done;                                       \
  }; f;"

  # merge parent branch?
  rebase-local = "!f() {                                         \
    local branch=$(git branch | grep '^\\*' | sed 's|^\\* ||');  \
    local numLocal=$(git rev-list --count origin/$branch..HEAD); \
    local lastPush=$(git rev-parse origin/$branch);              \
    if [ $numLocal -le 1 ]; then                                 \
      echo \"No commits to rebase.\";                            \
    else                                                         \
      echo \"rebase --interactive $lastPush\";                   \
      git rebase --interactive $lastPush;                        \
    fi;                                                          \
  }; f;"

  # Find who you branched from. Works most of the time.
  # https://stackoverflow.com/questions/3161204/find-the-parent-branch-of-a-git-branch
  #   Using Joe Chrylser's answer at https://stackoverflow.com/a/17843908/1701180
  # If you start getting warnings about more than 25 refs, remove the -a option below
  parent = "!f() {                                   \
        git show-branch -a                           \
        | grep '\\*'                                 \
        | grep -v $(git rev-parse --abbrev-ref HEAD) \
        | head -n1                                   \
        | sed 's/.*\\[\\(.*\\)\\].*/\\1/'            \
        | sed 's/[\\^~].*//';                        \
  }; f"


